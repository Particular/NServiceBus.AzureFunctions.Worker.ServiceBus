[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.AzureFunctions.Worker.ServiceBus.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus
{
    public class FunctionEndpoint : NServiceBus.IFunctionEndpoint
    {
        public System.Threading.Tasks.Task Process(byte[] body, System.Collections.Generic.IDictionary<string, string> userProperties, string messageId, int deliveryCount, string replyTo, string correlationId, Microsoft.Azure.Functions.Worker.FunctionContext functionContext) { }
        public System.Threading.Tasks.Task Publish(object message, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Send(object message, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Subscribe(System.Type eventType, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Unsubscribe(System.Type eventType, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
        public System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext) { }
    }
    public static class FunctionsHostBuilderExtensions
    {
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBus(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, System.Action<NServiceBus.ServiceBusTriggeredEndpointConfiguration> configuration = null) { }
        public static Microsoft.Extensions.Hosting.IHostBuilder UseNServiceBus(this Microsoft.Extensions.Hosting.IHostBuilder hostBuilder, string endpointName, System.Action<NServiceBus.ServiceBusTriggeredEndpointConfiguration> configuration = null) { }
    }
    public interface IFunctionEndpoint
    {
        System.Threading.Tasks.Task Process(byte[] body, System.Collections.Generic.IDictionary<string, string> userProperties, string messageId, int deliveryCount, string replyTo, string correlationId, Microsoft.Azure.Functions.Worker.FunctionContext functionContext);
        System.Threading.Tasks.Task Publish(object message, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Send(object message, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Subscribe(System.Type eventType, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, Microsoft.Azure.Functions.Worker.FunctionContext executionContext);
    }
    [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.All)]
    public sealed class NServiceBusTriggerFunctionAttribute : System.Attribute
    {
        public NServiceBusTriggerFunctionAttribute(string endpointName) { }
        public string EndpointName { get; }
        public string TriggerFunctionName { get; set; }
    }
    public class ServiceBusTriggeredEndpointConfiguration
    {
        public void Advanced(System.Action<NServiceBus.EndpointConfiguration> advancedConfiguration) { }
        public void ConfigureTransport(System.Action<NServiceBus.TransportExtensions<NServiceBus.AzureServiceBusTransport>> configureTransport) { }
        public void DoNotSendMessagesToErrorQueue() { }
        public void LogDiagnostics() { }
        public void Routing(System.Action<NServiceBus.RoutingSettings> configureRouting) { }
        public void ServiceBusConnectionString(string connectionString) { }
        public void UseSerialization<T>(System.Action<NServiceBus.Serialization.SerializationExtensions<T>> advancedConfiguration = null)
            where T : NServiceBus.Serialization.SerializationDefinition, new () { }
    }
}