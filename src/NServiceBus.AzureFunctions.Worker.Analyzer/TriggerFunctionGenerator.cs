#nullable enable

namespace NServiceBus.AzureFunctions.Worker.Analyzer;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

[Generator]
public class TriggerFunctionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var attribute = context.SyntaxProvider.ForAttributeWithMetadataName("NServiceBus.NServiceBusTriggerFunctionAttribute", (_, _) => true, (context, _) => GetAttributeValues(context));

        context.RegisterSourceOutput(attribute, (context, attributeValues) =>
        {
            // Generate an error if empty/null/space is used as endpoint name
            if (string.IsNullOrWhiteSpace(attributeValues.EndpointName))
            {
                context.ReportDiagnostic(Diagnostic.Create(AzureFunctionsDiagnostics.InvalidEndpointNameError, Location.None, attributeValues.EndpointName));
                return;
            }

            // Generate an error if a binding expression is provided with no trigger function name
            if (!attributeValues.TriggerFunctionNameSet && IsBindingExpression(attributeValues.EndpointName))
            {
                context.ReportDiagnostic(Diagnostic.Create(AzureFunctionsDiagnostics.InvalidBindingExpression, Location.None, attributeValues.EndpointName));
                return;
            }

            // Generate an error if empty/null/space is used as trigger function name
            if (attributeValues.TriggerFunctionNameSet && string.IsNullOrWhiteSpace(attributeValues.TriggerFunctionName))
            {
                context.ReportDiagnostic(Diagnostic.Create(AzureFunctionsDiagnostics.InvalidTriggerFunctionNameError, Location.None, attributeValues.TriggerFunctionName));
                return;
            }

            context.AddSource("NServiceBus_FunctionEndpointTrigger.g.cs", SourceText.From(Source(attributeValues), Encoding.UTF8));
        });
    }

    readonly record struct AttributeValues
    {
        public AttributeValues(string? endpointName, string? triggerFunctionName, bool triggerFunctionNameSet, string? connection)
        {
            EndpointName = endpointName;
            TriggerFunctionName = triggerFunctionName;
            TriggerFunctionNameSet = triggerFunctionNameSet;
            Connection = connection;
        }

        public readonly string? EndpointName;
        public readonly string? TriggerFunctionName;
        public readonly bool TriggerFunctionNameSet;
        public readonly string? Connection;
    }

    static AttributeValues GetAttributeValues(GeneratorAttributeSyntaxContext context)
    {
        string? endpointName = null;
        string? triggerFunctionName = null;
        bool triggerFunctionNameSet = false;
        string? connection = null;

        foreach (var attribute in context.Attributes)
        {
            foreach (var argument in attribute.ConstructorArguments)
            {
                endpointName = argument.Value?.ToString();
            }

            foreach (var argument in attribute.NamedArguments)
            {
                if (argument.Key == "TriggerFunctionName")
                {
                    triggerFunctionName = argument.Value.Value?.ToString();
                    triggerFunctionNameSet = true;
                }
                else if (argument.Key == "Connection")
                {
                    connection = argument.Value.Value?.ToString();
                }
            }
        }

        return new AttributeValues(endpointName, triggerFunctionName, triggerFunctionNameSet, connection);
    }

    static bool IsBindingExpression(string? endpointName) => endpointName is not null && !string.IsNullOrWhiteSpace(endpointName) && endpointName[0] == '%' && endpointName[0] == endpointName[endpointName.Length - 1];

    static string Source(AttributeValues attributeValues)
    {
        var triggerFunctionName = attributeValues.TriggerFunctionName ?? $"NServiceBusFunctionEndpointTrigger-{attributeValues.EndpointName}";

        string? connection = null;

        if (attributeValues.Connection is not null)
        {
            connection = $", Connection=\"{attributeValues.Connection}\"";
        }

        var source = $$"""
        // <autogenerated/>
        using System.Collections.Generic;
        using System.Threading;
        using System.Threading.Tasks;
        using Azure.Messaging.ServiceBus;
        using Microsoft.Azure.Functions.Worker;
        using NServiceBus;

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FunctionEndpointTrigger
        {
                readonly IFunctionEndpoint endpoint;

                public FunctionEndpointTrigger(IFunctionEndpoint endpoint)
                {
                    this.endpoint = endpoint;
                }

                [Function("{{triggerFunctionName}}")]
                public async Task Run(
                    [ServiceBusTrigger("{{attributeValues.EndpointName}}"{{connection}})] ServiceBusReceivedMessage message, ServiceBusMessageActions messageActions, FunctionContext context, CancellationToken cancellationToken)
                {
                    await endpoint.Process(message, messageActions, context, cancellationToken);
                }
        }
        """;

        return source;
    }
}
